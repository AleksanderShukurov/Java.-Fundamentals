package by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects;

import by.introduction_to_java_online.main.tasks.TrainingIO;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_1.Test1;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.AirlineAggregate;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.AirlineIO;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_2.InputOutput;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_2.Test2;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_3.Student;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.Train;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.TrainComparator;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.DecimalCounter;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.LogicOfDecimalCounter;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_6.Time;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_6.TimeInputOutput;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_7.Triangle;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_7.TriangleLogic;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_8.Customer;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_8.CustomerAggregate;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_8.CustomerInputOutput;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_9.Book;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_9.BookAggregate;
import by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_9.BookIO;

import java.util.Arrays;

public class Start {
    TrainingIO trainingIO = new TrainingIO();

    public void startingAutomatically() {
        trainingIO.printing("\n--------------------------------------------Task 1-----------------------------------------");
        Test1 test1 = new Test1(3, 4);
        test1.typingVariable();
        test1.sumOfVariable();
        test1.maxVariable();
        trainingIO.printing("\n--------------------------------------------Task 2-----------------------------------------");
        Test2 test2First = new Test2();
        InputOutput inputOutput = new InputOutput();
        inputOutput.setTest2(test2First);
        inputOutput.printingInformation();
        Test2 test2Second = new Test2();
        test2Second.setFirstVariable(1);
        test2Second.setSecondVariable(2);
        inputOutput.setTest2(test2Second);
        inputOutput.printingInformation();
        trainingIO.printing("\n--------------------------------------------Task 3-----------------------------------------");
        Student[] students = new Student[10];
        Student student = new Student();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_3.InputOutput inputOutput1 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_3.InputOutput();
        students[0] = new Student("Vasil'eva V. V.", "10305697sda", new int[]{6, 5, 6, 3, 8});
        students[1] = new Student("Fedorov F. F.", "10386797sda", new int[]{9, 8, 6, 7, 8});
        students[2] = new Student("Aleksandrov A. A.", "10234297sda", new int[]{10, 9, 9, 10, 9});
        students[3] = new Student("Ivanov I. I.", "1030rew34sda", new int[]{6, 8, 6, 6, 8});
        students[4] = new Student("Petrov P. P.", "10543597sda", new int[]{3, 5, 7, 3, 4});
        students[5] = new Student("Sidorov S. S.", "1075645697sda", new int[]{9, 9, 9, 9, 9});
        students[6] = new Student("Il'ich I. I.", "1033547sda", new int[]{10, 8, 9, 7, 9});
        students[7] = new Student("Romanov R. R.", "103034247sda", new int[]{9, 10, 9, 10, 9});
        students[8] = new Student("Valer'ev V. V.", "10543697sda", new int[]{6, 4, 6, 3, 5});
        students[9] = new Student("Victorov V. V.", "103056745da", new int[]{9, 8, 7, 7, 8});
        trainingIO.printing("Printing all students:");
        inputOutput1.printingInformation(students);
        trainingIO.printing("Printing excellent students:");
        inputOutput1.printingInformation(student.excellentStudentPrinting(students));
        trainingIO.printing("\n--------------------------------------------Task 4-----------------------------------------");
        Train train = new Train();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.InputOutput inputOutput2 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.InputOutput();
        Train[] trains = new Train[6];
        trains[0] = new Train("Kyiv", 182, "10:22:45");
        trains[1] = new Train("Minsk", 12, "13:32");
        trains[2] = new Train("Moscow", 48, "04:46:95");
        trains[3] = new Train("Kyiv", 96, "17:15");
        trains[4] = new Train("Riga", 345, "42:42:42");
        trains[5] = new Train("Kyiv", 228, "10:22:12");
        TrainComparator trainComparator = new TrainComparator(trains);
        inputOutput2.printingTrainInformation(trains);
        trainingIO.printing("Sorted array of trains by number of train: ");
        inputOutput2.printingTrainInformation(trainComparator.sortingByTrainNumber());
        train.trainMatches(trains, 12);
        Arrays.sort(trains, new TrainComparator.trainsSortingByDepartureTime());
        trainingIO.printing("Trains sorted by last station name:");
        inputOutput2.printingTrainInformation(trains);
        trainingIO.printing("\n--------------------------------------------Task 5-----------------------------------------");
        DecimalCounter decimalCounter = new DecimalCounter();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.InputOutput inputOutput3 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.InputOutput();
        LogicOfDecimalCounter logicOfDecimalCounter = new LogicOfDecimalCounter();
        trainingIO.printing("Default state of the decimal counter:");
        inputOutput3.printCount(decimalCounter.getCounter());
        trainingIO.printing("Random initialisation of the decimal counter:");
        DecimalCounter decimalCounter1 = new DecimalCounter(logicOfDecimalCounter.randomPlace(decimalCounter.getCounter()));
        int[] counter = decimalCounter1.getCounter();
        inputOutput3.printCount(counter);
        trainingIO.printing("Decimal counter increased by one:");
        counter = logicOfDecimalCounter.increaseCount(counter);
        inputOutput3.printCount(counter);
        trainingIO.printing("Decimal counter decreased by one:");
        decimalCounter1.setCounter(logicOfDecimalCounter.decreaseCount(counter));
        inputOutput3.printCount(decimalCounter1.getCounter());
        inputOutput3.printCount(logicOfDecimalCounter.currentCount(counter));
        trainingIO.printing("\n--------------------------------------------Task 6-----------------------------------------");
        TimeInputOutput timeInputOutput = new TimeInputOutput();
        Time time = new Time("12:15:40");
        timeInputOutput.outputInformation(time);
        time.setHour(17);
        timeInputOutput.outputInformation(time);
        time.setMinute(78);
        timeInputOutput.outputInformation(time);
        time.setSeconds(43);
        timeInputOutput.outputInformation(time);
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        trainingIO.printing("\n--------------------------------------------Task 7-----------------------------------------");
        Triangle triangle = new Triangle(6, 7, 8);
        TriangleLogic triangleLogic = new TriangleLogic();
        trainingIO.printing("Side A of the triangle is: " + triangle.getSideA() + ". Side B of the triangle is: " + triangle.getSideB() + ". Side C of the triangle is: " + triangle.getSideC());
        trainingIO.printing("Area of the triangle is: " + String.format("%.1f", triangleLogic.areaOfTheTriangleCalculation(triangle.getSideA(), triangle.getSideB(), triangle.getSideC())));
        trainingIO.printing("Perimeter of the triangle is: " + String.format("%.1f", triangleLogic.perimeterOfTheTriangleCalculation(triangle.getSideA(), triangle.getSideB(), triangle.getSideC())));
        triangleLogic.coordinatesOfTheMediansIntersection(triangle.getSideA(), triangle.getSideB(), triangle.getSideC());
        trainingIO.printing("\n--------------------------------------------Task 8-----------------------------------------");
        Customer[] customers = new Customer[6];
        CustomerInputOutput customerInputOutput = new CustomerInputOutput();
        CustomerAggregate customerAggregate = new CustomerAggregate();
        customers[0] = new Customer(1, "Ivanov", "Ivan", "Ivanovich", "Sovetskaya Str.", "4325-1265-4875-5050", "135");
        customers[1] = new Customer(2, "Sidorov", "Sidor", "Sidorovich", "Moskovskaya Str.", "3758-9658-1248-2020", "3725");
        customers[2] = new Customer(3, "Petrov", "Petr", "Petrovich", "Kievskaya Str.", "3458-4587-6598-2525", "482");
        customers[3] = new Customer(4, "Sergeev", "Sergey", "Sergeevich", "Minskaya Str.", "3164-5214-9568-8080", "12");
        customers[4] = new Customer(5, "Maksimov", "Maksim", "Maksimovich", "Piterskaya Str.", "3154-8456-9856-6565", "211");
        customers[5] = new Customer(6, "Danilov", "Daniil", "Danilovich", "Vitebskaya Str.", "8912-4571-2654-1212", "856");
        trainingIO.printing("Array of the customers printing: ");
        customerInputOutput.printingInformationAboutCustomers(customers);
        Arrays.sort(customers, new CustomerAggregate.CustomerComparator());
        trainingIO.printing("Sorted array of the customers by name: ");
        customerInputOutput.printingInformationAboutCustomers(customers);
        trainingIO.printing("All numbers of the credit card that have number less than 4000000000000000 and bigger than 3000000000000000: ");
        Customer[] customers1 = customerAggregate.checkCreditCardNumber(customers, 3000000000000000L, 4000000000000000L);
        customerInputOutput.printingInformationAboutCustomers(customers1);
        trainingIO.printing("\n--------------------------------------------Task 9-----------------------------------------");
        BookAggregate bookAggregate = new BookAggregate();
        BookIO bookIO = new BookIO();
        Book[] books = new Book[7];
        books[0] = new Book(1, "Don Quixote", "Miguel de Cervantes", "Francisco de Robles", "1605", 800, 12.11, "Hard");
        books[1] = new Book(2, "The Great Gatsby", "F. Scott Fitzgerald", "Charles Scribner's Sons", "1925", 208, 6.45, "Soft");
        books[2] = new Book(3, "War and peace", "Leo Tolstoy", "The Russian Messenger", "1869", 1225, 37.12, "Hard");
        books[3] = new Book(4, "Hamlet", "William Shakespeare", " Barrons Educational Services", "1600", 800, 4.99, "Hard");
        books[4] = new Book(5, "Gulliver's Travels", "Jonathan Swift", "Benjamin Motte", "1726", 352, 8.5, "Soft");
        books[5] = new Book(6, "Othello", "William Shakespeare", "Simon & Schuster", "2017", 416, 9.99, "Soft");
        books[6] = new Book(7, "The idiot", "Fyodor Dostoevsky", "The Russian Messenger", "1868", 654, 18.25, "Hard");
        trainingIO.printing("List of the books: ");
        bookIO.bookPrinting(books);
        trainingIO.printing("William Shakespeare is author of these books: ");
        bookIO.bookPrinting(bookAggregate.authorMatches(books, "William Shakespeare"));
        trainingIO.printing("The Russian Messenger is the publisher of those books:");
        bookIO.bookPrinting(bookAggregate.publisherBooks(books, "The Russian Messenger"));
        trainingIO.printing("Books published after 1800 year: ");
        bookIO.bookPrinting(bookAggregate.yearOfThePublishing(books, "1800"));
        trainingIO.printing("\n--------------------------------------------Task 10-----------------------------------------");
        AirlineIO airlineIO = new AirlineIO();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline[] airlines = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline[5];
        airlines[0] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Minsk", "135B", "Tu-134", "15:40", 1, 3, 5);
        airlines[1] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Moscow", "512A", "SSJ 100/95", "20:00", 2, 3, 6);
        airlines[2] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Kyiv", "643C", "Il-86", "17:15", 1, 2, 4, 3);
        airlines[3] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Riga", "015A", "Airbus a310", "07:40", 1, 6, 7);
        airlines[4] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Moscow", "145C", "Boeing-737", "15:45", 1, 2, 3, 4, 5);
        AirlineAggregate airlineAggregate = new AirlineAggregate();
        trainingIO.printing("List of the all flights: ");
        airlineIO.airlinePrinting(airlines);
        trainingIO.printing("List of the flights that has Moscow as destination: ");
        airlineIO.airlinePrinting(airlineAggregate.flightDestination(airlines, "Moscow"));
        trainingIO.printing("List of the flights that be on Thursday");
        airlineIO.airlinePrinting(airlineAggregate.flightsDayOfTheWeek(airlines, "Thursday"));
        trainingIO.printing("List of the flights that be on Monday, and departure time bigger than 15:00 is:");
        airlineIO.airlinePrinting(airlineAggregate.flightsDayOfTheWeekWhenTimeMoreThan(airlines, "Monday", "15:00"));
        trainingIO.printing("\n--------------------------------------------End-----------------------------------------");
    }

    public void startingManual() {
        trainingIO.printing("\n--------------------------------------------Task 1-----------------------------------------");
        Test1 test1 = new Test1();
        test1.typingVariable();
        test1.sumOfVariable();
        test1.maxVariable();
        trainingIO.printing("\n--------------------------------------------Task 2-----------------------------------------");
        Test2 test2First = new Test2();
        InputOutput inputOutput = new InputOutput();
        inputOutput.setTest2(test2First);
        inputOutput.printingInformation();
        Test2 test2Second = new Test2();
        test2Second.setFirstVariable(1);
        test2Second.setSecondVariable(2);
        inputOutput.setTest2(test2Second);
        inputOutput.printingInformation();
        trainingIO.printing("\n--------------------------------------------Task 3-----------------------------------------");
        Student[] students = new Student[10];
        Student student = new Student();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_3.InputOutput inputOutput1 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_3.InputOutput();
        students[0] = new Student("Vasil'eva V. V.", "10305697sda", new int[]{6, 5, 6, 3, 8});
        students[1] = new Student("Fedorov F. F.", "10386797sda", new int[]{9, 8, 6, 7, 8});
        students[2] = new Student("Aleksandrov A. A.", "10234297sda", new int[]{10, 9, 9, 10, 9});
        students[3] = new Student("Ivanov I. I.", "1030rew34sda", new int[]{6, 8, 6, 6, 8});
        students[4] = new Student("Petrov P. P.", "10543597sda", new int[]{3, 5, 7, 3, 4});
        students[5] = new Student("Sidorov S. S.", "1075645697sda", new int[]{9, 9, 9, 9, 9});
        students[6] = new Student("Il'ich I. I.", "1033547sda", new int[]{10, 8, 9, 7, 9});
        students[7] = new Student("Romanov R. R.", "103034247sda", new int[]{9, 10, 9, 10, 9});
        students[8] = new Student("Valer'ev V. V.", "10543697sda", new int[]{6, 4, 6, 3, 5});
        students[9] = new Student("Victorov V. V.", "103056745da", new int[]{9, 8, 7, 7, 8});
        trainingIO.printing("Printing excellent students:");
        inputOutput1.printingInformation(student.excellentStudentPrinting(students));
        trainingIO.printing("\n--------------------------------------------Task 4-----------------------------------------");
        Train train = new Train();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.InputOutput inputOutput2 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_4.InputOutput();
        Train[] trains = new Train[6];
        trains[0] = new Train("Kyiv", 182, "10:22:45");
        trains[1] = new Train("Minsk", 12, "13:32");
        trains[2] = new Train("Moscow", 48, "04:46:95");
        trains[3] = new Train("Kyiv", 96, "17:15");
        trains[4] = new Train("Riga", 345, "42:42:42");
        trains[5] = new Train("Kyiv", 228, "10:22:12");
        TrainComparator trainComparator = new TrainComparator(trains);
        inputOutput2.printingTrainInformation(trains);
        trainingIO.printing("Sorted array of trains by number of train: ");
        inputOutput2.printingTrainInformation(trainComparator.sortingByTrainNumber());
        train.trainMatches(trains);
        Arrays.sort(trains, new TrainComparator.trainsSortingByDepartureTime());
        trainingIO.printing("Trains sorted by last station name:");
        inputOutput2.printingTrainInformation(trains);
        trainingIO.printing("\n--------------------------------------------Task 5-----------------------------------------");
        DecimalCounter decimalCounter = new DecimalCounter();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.InputOutput inputOutput3 = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_5.InputOutput();
        LogicOfDecimalCounter logicOfDecimalCounter = new LogicOfDecimalCounter();
        trainingIO.printing("Default state of the decimal counter:");
        inputOutput3.printCount(decimalCounter.getCounter());
        trainingIO.printing("Random initialisation of the decimal counter:");
        DecimalCounter decimalCounter1 = new DecimalCounter(logicOfDecimalCounter.randomPlace(decimalCounter.getCounter()));
        int[] counter = decimalCounter1.getCounter();
        inputOutput3.printCount(counter);
        trainingIO.printing("Decimal counter increased by one:");
        counter = logicOfDecimalCounter.increaseCount(counter);
        inputOutput3.printCount(counter);
        trainingIO.printing("Decimal counter decreased by one:");
        decimalCounter1.setCounter(logicOfDecimalCounter.decreaseCount(counter));
        inputOutput3.printCount(decimalCounter1.getCounter());
        inputOutput3.printCount(logicOfDecimalCounter.currentCount(counter));
        trainingIO.printing("\n--------------------------------------------Task 6-----------------------------------------");
        TimeInputOutput timeInputOutput = new TimeInputOutput();
        trainingIO.printing("Set time in format HH:mm:ss");
        Time time = new Time(timeInputOutput.inputInformation());
        timeInputOutput.outputInformation(time);
        trainingIO.printing("Set hour:");
        time.setHour(Integer.parseInt(timeInputOutput.inputInformation()));
        timeInputOutput.outputInformation(time);
        trainingIO.printing("Set minute:");
        time.setMinute(Integer.parseInt(timeInputOutput.inputInformation()));
        timeInputOutput.outputInformation(time);
        trainingIO.printing("Set seconds: ");
        time.setSeconds(Integer.parseInt(timeInputOutput.inputInformation()));
        timeInputOutput.outputInformation(time);
        trainingIO.printing("\n--------------------------------------------Task 7-----------------------------------------");
        Triangle triangle = new Triangle(6, 7, 8);
        TriangleLogic triangleLogic = new TriangleLogic();
        trainingIO.printing("Side A of the triangle is: " + triangle.getSideA() + ". Side B of the triangle is: " + triangle.getSideB() + ". Side C of the triangle is: " + triangle.getSideC());
        trainingIO.printing("Area of the triangle is: " + String.format("%.1f", triangleLogic.areaOfTheTriangleCalculation(triangle.getSideA(), triangle.getSideB(), triangle.getSideC())));
        trainingIO.printing("Perimeter of the triangle is: " + String.format("%.1f", triangleLogic.perimeterOfTheTriangleCalculation(triangle.getSideA(), triangle.getSideB(), triangle.getSideC())));
        triangleLogic.coordinatesOfTheMediansIntersection(triangle.getSideA(), triangle.getSideB(), triangle.getSideC());
        trainingIO.printing("\n--------------------------------------------Task 8-----------------------------------------");
        Customer[] customers = new Customer[6];
        CustomerInputOutput customerInputOutput = new CustomerInputOutput();
        CustomerAggregate customerAggregate = new CustomerAggregate();
        customers[0] = new Customer(1, "Ivanov", "Ivan", "Ivanovich", "Sovetskaya Str.", "4325-1265-4875-5050", "135");
        customers[1] = new Customer(2, "Sidorov", "Sidor", "Sidorovich", "Moskovskaya Str.", "3758-9658-1248-2020", "3725");
        customers[2] = new Customer(3, "Petrov", "Petr", "Petrovich", "Kievskaya Str.", "3458-4587-6598-2525", "482");
        customers[3] = new Customer(4, "Sergeev", "Sergey", "Sergeevich", "Minskaya Str.", "3164-5214-9568-8080", "12");
        customers[4] = new Customer(5, "Maksimov", "Maksim", "Maksimovich", "Piterskaya Str.", "3154-8456-9856-6565", "211");
        customers[5] = new Customer(6, "Danilov", "Daniil", "Danilovich", "Vitebskaya Str.", "8912-4571-2654-1212", "856");
        trainingIO.printing("Array of the customers printing: ");
        customerInputOutput.printingInformationAboutCustomers(customers);
        Arrays.sort(customers, new CustomerAggregate.CustomerComparator());
        trainingIO.printing("Sorted array of the customers by name: ");
        customerInputOutput.printingInformationAboutCustomers(customers);
        trainingIO.printing("All numbers of the credit card that have number less than 4000000000000000 and bigger than 3000000000000000: ");
        Customer[] customers1 = customerAggregate.checkCreditCardNumber(customers, 3000000000000000L, 4000000000000000L);
        customerInputOutput.printingInformationAboutCustomers(customers1);
        trainingIO.printing("\n--------------------------------------------Task 9-----------------------------------------");
        BookAggregate bookAggregate = new BookAggregate();
        BookIO bookIO = new BookIO();
        Book[] books = new Book[7];
        books[0] = new Book(1, "Don Quixote", "Miguel de Cervantes", "Francisco de Robles", "1605", 800, 12.11, "Hard");
        books[1] = new Book(2, "The Great Gatsby", "F. Scott Fitzgerald", "Charles Scribner's Sons", "1925", 208, 6.45, "Soft");
        books[2] = new Book(3, "War and peace", "Leo Tolstoy", "The Russian Messenger", "1869", 1225, 37.12, "Hard");
        books[3] = new Book(4, "Hamlet", "William Shakespeare", " Barrons Educational Services", "1600", 800, 4.99, "Hard");
        books[4] = new Book(5, "Gulliver's Travels", "Jonathan Swift", "Benjamin Motte", "1726", 352, 8.5, "Soft");
        books[5] = new Book(6, "Othello", "William Shakespeare", "Simon & Schuster", "2017", 416, 9.99, "Soft");
        books[6] = new Book(7, "The idiot", "Fyodor Dostoevsky", "The Russian Messenger", "1868", 654, 18.25, "Hard");
        trainingIO.printing("List of the books: ");
        bookIO.bookPrinting(books);
        trainingIO.printing("William Shakespeare is author of these books: ");
        bookIO.bookPrinting(bookAggregate.authorMatches(books, "William Shakespeare"));
        trainingIO.printing("The Russian Messenger is the publisher of those books:");
        bookIO.bookPrinting(bookAggregate.publisherBooks(books, "The Russian Messenger"));
        trainingIO.printing("Books published after 1800 year: ");
        bookIO.bookPrinting(bookAggregate.yearOfThePublishing(books, "1800"));
        trainingIO.printing("\n--------------------------------------------Task 10-----------------------------------------");
        AirlineIO airlineIO = new AirlineIO();
        by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline[] airlines = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline[5];
        airlines[0] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Minsk", "135B", "Tu-134", "15:40", 1, 3, 5);
        airlines[1] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Moscow", "512A", "SSJ 100/95", "20:00", 2, 3, 6);
        airlines[2] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Kyiv", "643C", "Il-86", "17:15", 1, 2, 4, 3);
        airlines[3] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Riga", "015A", "Airbus a310", "07:40", 1, 6, 7);
        airlines[4] = new by.introduction_to_java_online.main.tasks.module_4.simple_classes_and_objects.task_10.Airline("Moscow", "145C", "Boeing-737", "15:45", 1, 2, 3, 4, 5);
        AirlineAggregate airlineAggregate = new AirlineAggregate();
        trainingIO.printing("List of the all flights: ");
        airlineIO.airlinePrinting(airlines);
        trainingIO.printing("List of the flights that has Moscow as destination: ");
        airlineIO.airlinePrinting(airlineAggregate.flightDestination(airlines, "Moscow"));
        trainingIO.printing("List of the flights that be on Thursday");
        airlineIO.airlinePrinting(airlineAggregate.flightsDayOfTheWeek(airlines, "Thursday"));
        trainingIO.printing("List of the flights that be on Monday, and departure time bigger than 15:00 is:");
        airlineIO.airlinePrinting(airlineAggregate.flightsDayOfTheWeekWhenTimeMoreThan(airlines, "Monday", "15:00"));
        trainingIO.printing("\n--------------------------------------------End-----------------------------------------");
    }
}


